- mocha
  - for running unit tests
  - To write/run unit tests in TS
    - install "@types/mocha", "@types/node", "ts-node", "typescript"
    - create the following NPM script:
       "test": "mocha -r ts-node/register 'tests/**/*.ts'"
       - -r ts-node/register
         - require the typescript compiler via ts-node
       - 'tests/**/*.ts'
         - where to look for tests written in typescript
    - tsconfig.json
      - add the following under "compilerOptions"  
        "types": [
            "@types/node",
            "@types/mocha"
        ],
        - "@types/node" allows you to use nodejs 
          built-in functions (assert, ...) in your unit tests
        - "@types/mocha" allows you to use Mocha
          functions (it, describe, ...) in your unit tests 
           
- solc 
  - solditiy compiler
  - the input is the solidity source code plus some settings 
  - the output is a json file
    - for our purpose we only care about the following properties
      - abi that can be used by typechain and web3 
      - the bytecode.object which contains the bytecode to be executed
        by EVM

- ganache-cli
  - blockchain emulator
  - allows you to deploy contracts and now run them in your unit tests

- web3
  - allows you to deploy contracts to either local Ganache or other
    networks such as Rinkeby Test Network
  - allows you to access a deployed contract and run its methods
  - allows you take the abi in the solc output to create a web3 
    contract instance. You can later call the methods on that instance
    to perform different logic defined in the smart contract #01-01

- typechain and @typechain/web3-v1
  - use them to generate TS types for the smart contracts
  - check the generate-types script to see how they are used
      
- @truffle/hdwallet-provider
  - just like ganache or MetaMask, this package can be used
    as a provider for web3 #01-02
  - web3 uses it to connect to Rinkeby Test Network to deploy
    contracts #01-03